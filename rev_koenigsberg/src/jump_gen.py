


def print_asm(node_num,xor_num,prev_node):
    return f"""node_{node_num+1}:
    if (visited[{node_num}] == 1) return 1;
    visited[{node_num}] = visited[{prev_node}];
    c = input_buf[(ctr++)%FLAG_LEN] ^ {xor_num};
    jump_target = *(label_jump_table + ((16*{node_num} + c)%TOTAL_JUMPS));
    if (ctr > 1000) return 1;
    asm volatile("jmp *%0" : : "r" (jump_target));
"""

#print(print_asm(0,15,0))

nodes = [0, 492, 618, 100, 961, 963, 51, 125, 491, 46, 137, 709, 770, 609, 849, 408, 725, 972, 842, 350, 434, 182, 916, 120, 172, 524, 678, 687, 878, 898, 969, 987, 691, 627, 617, 493, 831, 228, 758, 154, 69, 571, 503, 90, 443, 620, 243, 489, 44, 852, 884, 447, 370, 952, 621, 516, 949, 613, 194, 411, 910, 811, 871, 268, 619, 906, 805, 901, 982, 573, 917, 295, 371, 240, 706, 791, 947, 938, 833, 179, 886, 14, 988, 895, 652, 607, 661, 285, 248, 587, 922, 745, 161, 527, 374, 234, 55, 271, 7, 461, 794, 354, 253, 203, 332, 372, 427, 890, 484, 530, 616, 303, 924, 294, 481, 542, 577, 818, 440, 671, 518, 682, 940, 651, 482, 629, 736, 581, 990, 476, 255, 511, 854, 135, 907, 380, 746, 17, 357, 936, 536, 164, 328, 329, 441, 56, 404, 737, 966, 71, 718, 583, 810, 65, 470, 645, 352, 686, 897, 538, 428, 158, 699, 207, 666, 962, 275, 144, 204, 893, 284, 696, 250, 50, 474, 586, 506, 552, 744, 373, 38, 921, 734, 335, 712, 732, 412, 837, 377, 338, 70, 155, 726, 860, 739, 903, 236, 522, 302, 331, 256, 806, 846, 467, 773, 20, 174, 899, 868, 266, 532, 237, 814, 61, 421, 507, 363, 349, 449, 876, 415, 8, 16, 105, 289, 287, 36, 388, 713, 58, 719, 79, 649, 760, 752, 280, 643, 80, 815, 425, 128, 866, 848, 87, 32, 883, 152, 118, 870, 525, 156, 905, 986, 26, 322, 334, 759, 418, 590, 115, 313, 239, 534, 535, 812, 183, 657, 379, 2, 389, 54, 570, 317, 89, 804, 189, 159, 839, 931, 659, 114, 597, 151, 998, 430, 190, 215, 867, 109, 588, 361, 283, 92, 347, 451, 717, 429, 551, 95, 84, 501, 262, 827, 462, 25, 630, 946, 282, 647, 93, 639, 298, 680, 740, 324, 777, 585, 219, 127, 995, 308, 762, 422, 448, 106, 223, 944, 785, 950, 305, 981, 840, 82, 792, 396, 19, 521, 544, 624, 435, 360, 592, 242, 555, 803, 465, 88, 515, 821, 825, 464, 410, 971, 229, 28, 299, 721, 85, 496, 442, 424, 751, 836, 231, 206, 723, 150, 173, 676, 401, 844, 742, 968, 212, 887, 566, 693, 809, 612, 423, 816, 896, 407, 997, 714, 716, 991, 731, 340, 575, 512, 66, 633, 269, 954, 176, 885, 935, 974, 48, 107, 167, 789, 63, 146, 385, 142, 692, 419, 213, 957, 772, 265, 574, 763, 776, 508, 247, 874, 316, 548, 336, 920, 454, 955, 858, 227, 578, 171, 550, 10, 169, 979, 765, 923, 399, 199, 664, 749, 304, 509, 121, 111, 783, 622, 353, 604, 378, 558, 479, 59, 76, 606, 15, 42, 902, 13, 18, 241, 337, 526, 626, 86, 73, 477, 258, 727, 249, 964, 455, 251, 35, 930, 279, 658, 181, 608, 143, 162, 636, 800, 690, 602, 356, 900, 681, 72, 830, 861, 959, 478, 145, 614, 97, 365, 134, 81, 267, 722, 926, 293, 786, 911, 565, 487, 908, 417, 774, 875, 413, 641, 698, 934, 596, 286, 529, 768, 958, 341, 556, 704, 881, 452, 47, 101, 392, 170, 113, 520, 502, 175, 416, 99, 117, 549, 138, 220, 984, 531, 667, 564, 459, 980, 12, 4, 78, 710, 519, 672, 771, 813, 894, 663, 1, 222, 463, 798, 560, 5, 822, 755, 60, 670, 873, 45, 225, 856, 918, 259, 767, 715, 323, 132, 841, 53, 67, 116, 669, 823, 889, 348, 595, 513, 572, 939, 703, 500, 198, 505, 517, 29, 724, 582, 824, 598, 799, 951, 632, 888, 973, 913, 83, 369, 891, 311, 547, 628, 123, 528, 720, 21, 817, 754, 381, 925, 39, 648, 729, 929, 514, 168, 748, 386, 743, 766, 850, 196, 342, 747, 346, 472, 942, 956, 22, 591, 615, 967, 497, 471, 504, 589, 184, 559, 656, 843, 205, 730, 801, 456, 246, 358, 96, 796, 131, 675, 554, 230, 438, 62, 382, 31, 321, 674, 431, 826, 707, 393, 395, 290, 405, 201, 108, 344, 486, 224, 52, 780, 210, 611, 30, 853, 33, 483, 640, 390, 394, 333, 653, 757, 642, 126, 197, 91, 376, 877, 976, 188, 366, 398, 488, 375, 397, 945, 705, 605, 300, 753, 634, 689, 402, 543, 864, 297, 68, 784, 863, 264, 94, 202, 163, 733, 623, 533, 149, 603, 200, 953, 993, 650, 420, 129, 232, 960, 996, 975, 186, 406, 781, 594, 985, 546, 992, 915, 764, 567, 436, 11, 540, 872, 148, 177, 306, 701, 330, 859, 904, 790, 41, 104, 209, 735, 103, 446, 450, 6, 646, 57, 187, 281, 460, 191, 834, 277, 838, 601, 315, 140, 157, 927, 141, 779, 994, 130, 235, 978, 309, 485, 400, 797, 136, 576, 124, 119, 40, 788, 192, 112, 49, 351, 226, 600, 468, 943, 711, 862, 217, 970, 238, 244, 291, 307, 829, 314, 233, 437, 9, 364, 494, 409, 857, 355, 214, 557, 245, 965, 75, 320, 218, 793, 928, 668, 403, 296, 775, 252, 665, 345, 221, 301, 288, 523, 147, 728, 869, 37, 261, 260, 660, 469, 638, 325, 983, 882, 139, 599, 688, 865, 880, 319, 24, 432, 339, 694, 480, 122, 98, 683, 414, 819, 34, 326, 545, 855, 444, 700, 273, 563, 761, 165, 439, 708, 702, 795, 391, 756, 77, 312, 453, 327, 914, 185, 510, 276, 211, 828, 553, 932, 499, 769, 593, 539, 153, 847, 561, 845, 102, 782, 695, 466, 684, 787, 635, 384, 292, 43, 673, 368, 685, 367, 741, 912, 278, 802, 631, 23, 359, 637, 568, 498, 655, 433, 310, 808, 580, 610, 383, 216, 426, 263, 750, 193, 318, 562, 457, 387, 74, 778, 892, 362, 933, 662, 195, 475, 832, 579, 133, 64, 178, 677, 458, 941, 679, 166, 495, 160, 654, 490, 851, 697, 625, 584, 445, 569, 537, 208, 270, 473, 738, 989, 274, 879, 948, 343, 937, 254, 909, 807, 3, 257, 272, 110, 541, 835, 919, 644, 820, 180, 27, 977, 999]

import random

def gen_asm(rands):    
    with open("generated_asm.txt", "w") as f:
        for k in range(1,len(nodes)):
            r = rands[nodes.index(k)]
            f.write(print_asm(k,r,nodes[nodes.index(k)-1]))
#gen_asm()

def getlabel(i):
    return f"&&node_{i+1}"


flag = b"srdnlen{uhm_technically_this_is_a_hamiltonian_cycle_:nerd:_0ff829a6}"


def tweak_rands(rands=[random.randint(40,126) for _ in range(1000)]):    
    visited = set()
    for i in range(999):
        jt_offset = (nodes[i]*16 + (flag[i%len(flag)]^rands[i])%16000)
        if (jt_offset in visited): 
            # Try to recover with single bit xors
            for off in range(4):
                if (jt_offset ^ 1<<off) not in visited:
                    rands[i] ^= 1<<off
                    jt_offset ^= 1<<off
                    break
        visited.add(jt_offset)
    return rands

#rands = tweak_rands()
#print(rands)

rands = [53, 103, 80, 83, 82, 75, 123, 42, 50, 93, 83, 71, 61, 42, 53, 64, 52, 58, 111, 79, 105, 118, 92, 49, 60, 101, 92, 122, 110, 98, 113, 115, 126, 86, 50, 98, 125, 113, 97, 79, 69, 56, 53, 58, 123, 118, 114, 111, 90, 103, 106, 97, 95, 103, 45, 45, 107, 94, 62, 70, 111, 114, 73, 90, 78, 72, 92, 102, 58, 74, 99, 99, 114, 104, 40, 104, 103, 123, 80, 68, 97, 120, 56, 92, 99, 72, 109, 77, 124, 50, 119, 117, 119, 66, 51, 58, 54, 48, 121, 42, 102, 88, 104, 42, 75, 77, 115, 94, 113, 113, 76, 70, 110, 58, 44, 122, 61, 48, 61, 95, 93, 43, 83, 83, 63, 86, 91, 82, 123, 70, 118, 73, 95, 54, 74, 108, 66, 94, 84, 109, 54, 70, 93, 83, 60, 70, 123, 108, 90, 58, 86, 107, 81, 47, 83, 47, 82, 53, 117, 100, 52, 66, 50, 68, 108, 75, 41, 120, 103, 92, 63, 101, 124, 89, 75, 72, 60, 92, 116, 45, 84, 
106, 119, 107, 92, 96, 54, 118, 56, 107, 42, 44, 120, 95, 65, 101, 84, 47, 106, 51, 44, 74, 57, 122, 87, 121, 72, 97, 91, 83, 42, 41, 43, 105, 47, 71, 122, 94, 122, 121, 109, 64, 108, 122, 40, 98, 53, 69, 72, 97, 72, 54, 80, 86, 116, 74, 71, 107, 81, 75, 53, 87, 121, 86, 124, 71, 117, 73, 120, 62, 40, 122, 78, 108, 70, 88, 48, 58, 53, 71, 56, 80, 51, 112, 43, 94, 66, 104, 68, 126, 59, 121, 53, 109, 98, 102, 80, 66, 54, 110, 49, 81, 46, 113, 107, 77, 59, 97, 125, 96, 86, 80, 121, 74, 81, 58, 65, 104, 81, 70, 49, 92, 92, 84, 112, 85, 67, 111, 72, 123, 77, 47, 111, 78, 124, 86, 74, 61, 62, 90, 80, 55, 123, 114, 94, 85, 99, 121, 85, 121, 42, 59, 107, 42, 91, 42, 79, 44, 95, 125, 62, 41, 118, 111, 114, 63, 62, 51, 74, 60, 101, 64, 111, 47, 58, 102, 69, 103, 126, 71, 62, 40, 100, 107, 125, 85, 82, 55, 60, 73, 78, 123, 62, 50, 78, 60, 79, 70, 106, 121, 122, 70, 45, 41, 121, 117, 64, 88, 93, 81, 88, 97, 125, 124, 103, 83, 64, 107, 42, 109, 119, 100, 108, 76, 51, 85, 78, 88, 40, 90, 60, 104, 124, 76, 104, 91, 118, 112, 91, 94, 56, 109, 112, 124, 86, 40, 46, 41, 54, 107, 72, 78, 92, 48, 64, 62, 122, 56, 63, 58, 44, 62, 126, 86, 73, 64, 60, 45, 76, 117, 63, 49, 59, 95, 86, 53, 85, 53, 54, 122, 110, 125, 45, 59, 74, 88, 97, 100, 105, 99, 71, 54, 97, 94, 69, 67, 111, 78, 45, 53, 57, 103, 40, 106, 
68, 122, 91, 101, 58, 110, 80, 124, 87, 51, 78, 72, 96, 50, 99, 80, 77, 57, 120, 64, 61, 42, 64, 58, 106, 64, 57, 106, 46, 98, 49, 116, 93, 106, 88, 90, 40, 109, 69, 89, 66, 42, 86, 58, 41, 85, 89, 77, 73, 65, 53, 62, 119, 91, 122, 89, 42, 96, 83, 79, 89, 115, 
87, 105, 53, 119, 56, 80, 45, 44, 44, 47, 98, 70, 124, 54, 77, 117, 72, 50, 79, 65, 58, 101, 76, 122, 100, 54, 57, 121, 46, 64, 126, 85, 102, 88, 82, 123, 88, 86, 48, 119, 58, 43, 71, 80, 117, 56, 62, 112, 114, 126, 81, 71, 43, 123, 66, 67, 120, 65, 83, 79, 89, 85, 126, 119, 108, 53, 42, 43, 126, 100, 75, 121, 100, 114, 116, 72, 123, 103, 93, 92, 112, 120, 56, 57, 104, 112, 110, 115, 115, 92, 76, 116, 92, 62, 94, 86, 53, 62, 120, 55, 117, 97, 49, 51, 83, 113, 90, 94, 91, 101, 126, 64, 121, 71, 106, 62, 80, 81, 111, 50, 80, 97, 114, 83, 95, 50, 84, 121, 109, 108, 66, 126, 102, 85, 123, 42, 89, 94, 103, 116, 43, 82, 119, 95, 40, 57, 59, 41, 88, 102, 75, 117, 63, 64, 54, 69, 102, 48, 71, 48, 47, 91, 78, 48, 100, 68, 54, 66, 68, 73, 72, 58, 111, 70, 51, 126, 92, 64, 44, 104, 44, 44, 59, 92, 107, 89, 44, 107, 53, 48, 106, 67, 108, 67, 102, 121, 65, 59, 55, 119, 58, 90, 62, 89, 81, 117, 126, 83, 67, 59, 78, 116, 99, 43, 47, 57, 112, 78, 72, 103, 94, 87, 64, 97, 67, 123, 72, 94, 74, 60, 46, 113, 63, 42, 67, 114, 112, 62, 90, 63, 83, 86, 102, 78, 108, 47, 92, 117, 73, 92, 70, 45, 122, 61, 58, 73, 47, 116, 106, 56, 106, 125, 43, 95, 84, 96, 78, 48, 84, 86, 125, 57, 58, 104, 123, 117, 71, 46, 125, 81, 51, 46, 59, 60, 125, 53, 75, 69, 46, 44, 47, 101, 91, 73, 126, 63, 85, 45, 108, 62, 70, 113, 75, 61, 81, 72, 77, 41, 104, 83, 76, 52, 96, 104, 108, 66, 88, 42, 92, 76, 105, 112, 54, 71, 90, 69, 94, 109, 107, 122, 52, 124, 115, 102, 119, 73, 40, 72, 120, 88, 107, 46, 62, 58, 76, 82, 106, 73, 83, 87, 100, 68, 56, 115, 95, 102, 125, 47, 40, 91, 59, 88, 72, 67, 87, 124, 40, 80, 93, 126, 48, 84, 122, 98, 96, 126, 100, 83, 92, 124, 108, 67, 121, 73, 102, 84, 112, 69, 62, 112, 98, 114, 56, 126, 57, 71, 113, 122, 50, 59, 62, 99, 55, 61, 43, 105, 109, 99, 94, 88, 77, 48, 100, 57, 92, 78, 123, 59, 118, 113, 47, 67, 73, 88, 45, 64, 59, 77, 114, 91, 80, 106, 104, 57, 51, 51, 54, 108, 44, 126, 70, 90, 108, 96, 54, 69, 126, 86, 67, 53, 96, 120, 68, 76]

#tweak_rands(rands)

def gen_jump_table(rands):
    #Generate offset:target pairs for the actual solution
    visited = set()
    important_targets = {}
    for i in range(999):
        c = (flag[i%len(flag)]^rands[i])
        jt_offset = (nodes[i]*16 + c)%16000 
        #print(f"offset for jump {i}: {chr(flag[i%len(flag)])}^{rands[i]}={c} + 16*{nodes[i]}")
        if (jt_offset in visited): 
            print(f"step {i}: Already occupied this offset {jt_offset}. Fix it with tweak_rands!")
            exit(1)
        offset_target = getlabel(nodes[i+1])
        visited.add(jt_offset)
        important_targets[jt_offset] = offset_target
        #print(f"jump from offset {jt_offset} to node {offset_target}")
    with open("generated_jt.txt", "w") as f:
        for k in range(16000):
            if k in important_targets:
                f.write(f"{important_targets[k]}, \n")
            else:
                f.write(f"{getlabel(random.randint(1,999))}, \n")

gen_asm(rands)
#gen_jump_table(rands)
